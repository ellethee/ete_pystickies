#!/bin/sh
### BEGIN INIT INFO
# Provides:          ete_pystickiesd
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: EtePyStikies
# Description:       Run EtePyStikies as daemon
### END INIT INFO

# Author: Luca Zaccaria
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
#PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

NAME=ete_pystickies
CONFIG=$NAME.cfg
WORKING_DIR="$HOME/.ete_pystickies"
# Read configuration variable file if it is present
[ -r $WORKING_DIR/$CONFIG ] && . $WORKING_DIR/$CONFIG
DESC="EtePyStikies Daemon."
DAEMON="$HOME/bin/$NAME"
RUNAS=$USER
VERBOSE=yes
LOGGING=debug
PIDFILE="/tmp/$NAME.pid"
DAEMON_ARGS="--listen --daemon"
SCRIPTNAME=$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
# . /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	#start-stop-daemon --start --quiet --make-pidfile --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		#|| return 1
	#start-stop-daemon --start --quiet --make-pidfile --pidfile $PIDFILE --exec $DAEMON -- \
		#$DAEMON_ARGS \
		#|| return 2
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
    PID=$(ps ax|grep "ete_pystickies.py $DAEMON_ARGS" |awk '{print $1}')
    echo $(ps ax|grep "ete_pystickies.py $DAEMON_ARGS") > "/tmp/cosi" 
    echo $PID > $PIDFILE

}

#
# Function that stops the daemon/service
#
do_stop()
{
   /sbin/start-stop-daemon --stop --pidfile $PIDFILE --verbose
   #rm $PIDFILE
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
      do_start
	;;
  stop)
      do_stop
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	$0 stop 
	$0 start
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac
